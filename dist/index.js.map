{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport express, { Express } from 'express';\nimport { IgApiClient } from 'instagram-private-api';\nimport { get } from 'request-promise';\nimport { CronJob } from 'cron';\nimport OpenAI from \"openai\";\nconst openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n});\n\ndotenv.config();\n\nconst systemPrompt = `\nquadcat yuou need to like figure this out or else you will fail the math test................\nlike do you even remevber whjat an asymptote is\n\nbreh\n`\n\nconst imagePrompt = `\ngenerate an image catctactacatcatcat\n`\n\nconst captionPrompt = `\ngenerate a caption for the image catctactacatcatcat\n`\n\nconst generateImage = async (prompt: string): Promise<string> => {\n    const response = await openai.responses.create({\n        model: \"gpt-4.1-mini\",\n        input: systemPrompt + imagePrompt,\n        tools: [{ type: \"image_generation\" }],\n    });\n      \n    const imageData = response.output\n        .filter((output) => output.type === \"image_generation_call\")\n        .map((output) => output.result);\n\n    if (!imageData || imageData.length === 0 || !imageData[0]) {\n        throw new Error('No image URL was generated');\n    }\n\n    return imageData[0];\n}\n\nconst generateCaption = async (imageUrl: string): Promise<string> => {\n    const response = await openai.chat.completions.create({\n        model: \"gpt-4-vision-preview\",\n        messages: [\n            {\n                role: \"user\",\n                content: [\n                    { type: \"text\", text: systemPrompt + captionPrompt },\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            url: imageUrl\n                        }\n                    }\n                ]\n            }\n        ],\n        max_tokens: 300\n    });\n\n    const caption = response.choices[0]?.message?.content;\n    if (!caption) {\n        throw new Error('No caption was generated');\n    }\n\n    return caption;\n}\n\n\nconst app: Express = express();\nconst port: number = process.env.PORT ? parseInt(process.env.PORT) : 4000;\n\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});\n\nconst postToInsta = async (): Promise<void> => {\n    const ig: IgApiClient = new IgApiClient();\n    ig.state.generateDevice(process.env.IG_USERNAME || '');\n    await ig.account.login(process.env.IG_USERNAME || '', process.env.IG_PASSWORD || '');\n\n    try {\n        const imageUrl = await generateImage(imagePrompt);\n        const caption = await generateCaption(imageUrl);\n        const imageBuffer: Buffer = await get({\n            url: imageUrl,\n            encoding: null, \n        });\n\n        await ig.publish.photo({\n            file: imageBuffer,\n            caption: caption,\n        });\n    } catch (error) {\n        console.error('Failed to post to Instagram:', error);\n        throw error;\n    }\n};\n\nconst cronInsta: CronJob = new CronJob(\"30 5 * * *\", async () => {\n    await postToInsta();\n});\n\ncronInsta.start();"]}